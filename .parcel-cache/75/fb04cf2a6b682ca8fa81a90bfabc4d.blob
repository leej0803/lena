<!DOCTYPE html>
<html lang="en" class="no-js">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
        <title>WebGL Video Transitions | Demo 4 | Codrops</title>
        <meta name="description" content="Some WebGL video transitions with different effects using curtains.js">
        <meta name="keywords" content="curtains.js, webgl, video transition, animation, shader, javascript, web design">
        <meta name="author" content="Codrops">
        <link rel="shortcut icon" href="eaf7e95160a6f3b55496abb11efd15ed">
        <link rel="stylesheet" href="1185171ef9aff4fad86b3cc8a5871cca">
        <link rel="stylesheet" type="text/css" href="716f3c7da92282fba4d84721ab9d722c">
        <script data-parcel-key="554bd8b0f5098ce03cafacf94b8110fc">document.documentElement.className="js";var supportsCssVars=function(){var e,t=document.createElement("style");return t.innerHTML="root: { --tmp-var: bold; }",document.head.appendChild(t),e=!!(window.CSS&&window.CSS.supports&&window.CSS.supports("font-weight","var(--tmp-var)")),t.parentNode.removeChild(t),e};supportsCssVars()||alert("Please view this demo in a modern browser that supports CSS Variables.");</script>
    </head>
    <body class="demo-4">
        <main>
            <div class="frame">
                <h1 class="frame__title">WebGL Video Transitions with <a href="ad7f3d582de6dcff2f73516aff6570b0">curtains.js</a></h1>
                <nav class="frame__links">
                    <a href="281e899c1bcaef3a2d9486219203a818">Previous demo</a>
                    <a href="d541950fbb3367a5d91aa3f04fdc7863">Article</a>
                    <a href="9bf4ac1c48c147cb4816a93835e833ab">GitHub</a>
                </nav>
                <nav class="frame__demos">
                    <span class="frame__demos-text">More demos: </span>
                    <a href="0c4e3c411e72ef5b0cd470c2c28b3fe0" class="frame__demo">1</a>
                    <a href="5264199900e44916b2c02b787b43021c" class="frame__demo">2</a>
                    <a href="9f944e12927e2cc2790f797dd673825e" class="frame__demo">3</a>
                    <a href="a38f30060ff8f72b6a3149805e4999da" class="frame__demo frame__demo--current">4</a>
                    <a href="18b4349512c61bfc218c9d0d03171b0b" class="frame__demo">5</a>
                </nav>
                <button class="frame__button" id="intro"><svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 60 60" width="60" height="60"><path d="M45.563 29.174l-22-15A1 1 0 0022 15v30a.999.999 0 001.563.826l22-15a1 1 0 000-1.652zM24 43.107V16.893L43.225 30 24 43.107z"></path><path d="M30 0C13.458 0 0 13.458 0 30s13.458 30 30 30 30-13.458 30-30S46.542 0 30 0zm0 58C14.561 58 2 45.439 2 30S14.561 2 30 2s28 12.561 28 28-12.561 28-28 28z"></path></svg></button>
                <div class="frame__content">
                    <h2 class="frame__content-title">Unpretentious</h2>
                    <p class="frame__content-text">Select another video here:</p>
                    <nav class="frame__switch" id="nav">
                        <a class="frame__switch-item js-nav" data-nav="0">Wake up</a>
                        <a class="frame__switch-item js-nav" data-nav="1">Rejoice</a>
                        <a class="frame__switch-item js-nav" data-nav="2">Breathe</a>
                    </nav>
                </div>
            </div>
            <div class="video">
                <div id="canvas"></div>
                <div class="wrapper">
                    <div class="plane" data-duration="1">
                        <video playsinline="" muted="" src="08c2242aaa176392318bfb8f6699d8fb" data-sampler="firstTexture" preload="auto"></video>
                        <video playsinline="" muted="" src="9380ad17818e0aa7e7dba45cdd370ac2" data-sampler="secondTexture"></video>
                        <video playsinline="" muted="" src="c1f09c7ab0e9dc0886feb30d06a04ff5" data-sampler="thirdTexture"></video>
                    </div>
                </div>
            </div>
        </main>
        <script id="vert" type="text">precision mediump float;

            // default mandatory variables
            attribute vec3 aVertexPosition;
            attribute vec2 aTextureCoord;

            uniform mat4 uMVMatrix;
            uniform mat4 uPMatrix;

            // our texture matrices
            // displacement texture does not need to use them
            uniform mat4 firstTextureMatrix;
            uniform mat4 secondTextureMatrix;

            // custom variables
            varying vec3 vVertexPosition;
            varying vec2 vTextureCoord;
            varying vec2 vFirstTextureCoord;
            varying vec2 vSecondTextureCoord;

            // custom uniforms
            uniform float uTransitionTimer;

            void main() {
                gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);

                // varyings
                // use original texture coords for our displacement
                vTextureCoord = aTextureCoord;
                // use texture matrices for our videos
                vFirstTextureCoord = (firstTextureMatrix * vec4(aTextureCoord, 0.0, 1.0)).xy;
                vSecondTextureCoord = (secondTextureMatrix * vec4(aTextureCoord, 0.0, 1.0)).xy;
                vVertexPosition = aVertexPosition;
            }
        </script>
        <script id="frag" type="text">precision mediump float;

            // Linear interpolate center across center half of the image
            // Transition from https://gl-transitions.com/editor/CrossZoom
            // License: MIT
            // Author: rectalogic
            // ported by gre from https://gist.github.com/rectalogic/b86b90161503a0023231

            // Converted from https://github.com/rectalogic/rendermix-basic-effects/blob/master/assets/com/rendermix/CrossZoom/CrossZoom.frag
            // Which is based on https://github.com/evanw/glfx.js/blob/master/src/filters/blur/zoomblur.js
            // With additional easing functions from https://github.com/rectalogic/rendermix-basic-effects/blob/master/assets/com/rendermix/Easing/Easing.glsllib

            precision mediump float;

            varying vec3 vVertexPosition;
            varying vec2 vTextureCoord;
            varying vec2 vFirstTextureCoord;
            varying vec2 vSecondTextureCoord;

            // custom uniforms
            uniform float uTransitionTimer;
            uniform float uTimer;
            uniform float uTo;
            uniform float uFrom;
            uniform float uFadeIn;

            // our textures samplers
            // notice how it matches our data-sampler attributes
            uniform sampler2D firstTexture;
            uniform sampler2D secondTexture;
            uniform sampler2D thirdTexture;
            uniform sampler2D displacement;

            float strength = 0.4; // = 0.4

            const float PI = 3.141592653589793;

            float Linear_ease(in float begin, in float change, in float duration, in float time) {
                return change * time / duration + begin;
            }

            float Exponential_easeInOut(in float begin, in float change, in float duration, in float time) {
                if (time == 0.0)
                    return begin;
                else if (time == duration)
                    return begin + change;
                time = time / (duration / 2.0);
                if (time < 1.0)
                    return change / 2.0 * pow(2.0, 10.0 * (time - 1.0)) + begin;
                return change / 2.0 * (-pow(2.0, -10.0 * (time - 1.0)) + 2.0) + begin;
            }

            float Sinusoidal_easeInOut(in float begin, in float change, in float duration, in float time) {
                return -change / 2.0 * (cos(PI * time / duration) - 1.0) + begin;
            }

            float rand (vec2 co) {
              return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
            }



            vec4 getTextureByIndex(float index, vec2 vUv){
                vec4 result;
                if(index==0.){
                    result = texture2D(firstTexture,vUv);
                }
                if(index==1.){
                    result = texture2D(secondTexture,vUv);
                }
                if(index==2.){
                    result = texture2D(thirdTexture,vUv);
                }
                return result;
            }
            vec3 crossFade(in vec2 uv, in float dissolve, in float t1,in  float t2) {
                return mix(getTextureByIndex(t1,uv).rgb, getTextureByIndex(t2,uv).rgb, dissolve);
            }
            void main() {

                float progress = fract(uTransitionTimer);
                float currentTexture = uFrom;
                float nextTexture =  uTo;

                vec4 current = getTextureByIndex(uFrom, vFirstTextureCoord);
                vec4 next = getTextureByIndex(uTo, vFirstTextureCoord);
                float mask = step(vTextureCoord.y,uFadeIn);


                vec2 center = vec2(Linear_ease(0.25, 0.5, 1.0, progress), 0.5);
                float dissolve = Exponential_easeInOut(0.0, 1.0, 1.0, progress);

                // Mirrored sinusoidal loop. 0->strength then strength->0
                float strength = Sinusoidal_easeInOut(0.0, strength, 0.5, progress);

                vec3 color = vec3(0.0);
                float total = 0.0;
                vec2 toCenter = center - vFirstTextureCoord;

                /* randomize the lookup values to hide the fixed number of samples */
                float offset = rand(vFirstTextureCoord);

                for (float t = 0.0; t <= 40.0; t++) {
                    float percent = (t + offset) / 40.0;
                    float weight = 4.0 * (percent - percent * percent);
                    color += crossFade(vFirstTextureCoord + toCenter * percent * strength, dissolve, currentTexture,nextTexture) * weight;
                    total += weight;
                }

                gl_FragColor = vec4(color / total, 1.0);
                gl_FragColor = mix(vec4(0.,0.,0.,0),gl_FragColor, mask);
            }
        </script>
		<script src="f81a41fc5a7edcb292f86a22288431a8"></script>
	</body>
</html>