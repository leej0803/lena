<!DOCTYPE html>
<html lang="en" class="no-js">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
        <title>WebGL Video Transitions | Demo 4 | Codrops</title>
        <meta name="description" content="Some WebGL video transitions with different effects using curtains.js">
        <meta name="keywords" content="curtains.js, webgl, video transition, animation, shader, javascript, web design">
        <meta name="author" content="Codrops">
        <link rel="shortcut icon" href="/favicon.HASH_REF_8dff21e09d30b5bc9d248abe47b58bf7.ico">
        <link rel="stylesheet" href="https://use.typekit.net/ylw1llk.css">
        <link rel="stylesheet" type="text/css" href="/index.HASH_REF_fd2ab90d027c36bc482ca7edea68c68a.css">
        <script>// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function(modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x) {
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function(id, exports) {
    modules[id] = [
      function(require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function() {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function() {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"7Bp6r":[function(require,module,exports) {
var HMR_HOST = null;
var HMR_PORT = 1234;
var HMR_SECURE = false;
var HMR_ENV_HASH = "d751713988987e9331980363e24189ce";
module.bundle.HMR_BUNDLE_ID = "075d720d3ba564552307a5c0140b96ca";
// @flow
/*global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE*/
/*::
import type {
HMRAsset,
HMRMessage,
} from '@parcel/reporter-dev-server/src/HMRServer.js';
interface ParcelRequire {
(string): mixed;
cache: {|[string]: ParcelModule|};
hotData: mixed;
Module: any;
parent: ?ParcelRequire;
isParcelRequire: true;
modules: {|[string]: [Function, {|[string]: string|}]|};
HMR_BUNDLE_ID: string;
root: ParcelRequire;
}
interface ParcelModule {
hot: {|
data: mixed,
accept(cb: (Function) => void): void,
dispose(cb: (mixed) => void): void,
// accept(deps: Array<string> | string, cb: (Function) => void): void,
// decline(): void,
_acceptCallbacks: Array<(Function) => void>,
_disposeCallbacks: Array<(mixed) => void>,
|};
}
declare var module: {bundle: ParcelRequire, ...};
declare var HMR_HOST: string;
declare var HMR_PORT: string;
declare var HMR_ENV_HASH: string;
declare var HMR_SECURE: boolean;
*/
var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;
function Module(moduleName) {
  OldModule.call(this, moduleName);
  this.hot = {
    data: module.bundle.hotData,
    _acceptCallbacks: [],
    _disposeCallbacks: [],
    accept: function (fn) {
      this._acceptCallbacks.push(fn || (function () {}));
    },
    dispose: function (fn) {
      this._disposeCallbacks.push(fn);
    }
  };
  module.bundle.hotData = undefined;
}
module.bundle.Module = Module;
var checkedAssets, /*: {|[string]: boolean|}*/
acceptedAssets, /*: {|[string]: boolean|}*/
/*: {|[string]: boolean|}*/
assetsToAccept;
function getHostname() {
  return HMR_HOST || (location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');
}
function getPort() {
  return HMR_PORT || location.port;
}
// eslint-disable-next-line no-redeclare
var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
  var hostname = getHostname();
  var port = getPort();
  var protocol = HMR_SECURE || location.protocol == 'https:' && !(/localhost|127.0.0.1|0.0.0.0/).test(hostname) ? 'wss' : 'ws';
  var ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/');
  // $FlowFixMe
  ws.onmessage = function (event) /*: {data: string, ...}*/
  {
    checkedAssets = {
      /*: {|[string]: boolean|}*/
    };
    acceptedAssets = {
      /*: {|[string]: boolean|}*/
    };
    assetsToAccept = [];
    var data = /*: HMRMessage*/
    JSON.parse(event.data);
    if (data.type === 'update') {
      // Remove error overlay if there is one
      removeErrorOverlay();
      let assets = data.assets.filter(asset => asset.envHash === HMR_ENV_HASH);
      // Handle HMR Update
      var handled = false;
      assets.forEach(asset => {
        var didAccept = asset.type === 'css' || asset.type === 'js' && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);
        if (didAccept) {
          handled = true;
        }
      });
      if (handled) {
        console.clear();
        assets.forEach(function (asset) {
          hmrApply(module.bundle.root, asset);
        });
        for (var i = 0; i < assetsToAccept.length; i++) {
          var id = assetsToAccept[i][1];
          if (!acceptedAssets[id]) {
            hmrAcceptRun(assetsToAccept[i][0], id);
          }
        }
      } else {
        window.location.reload();
      }
    }
    if (data.type === 'error') {
      // Log parcel errors to console
      for (let ansiDiagnostic of data.diagnostics.ansi) {
        let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
        console.error('ðŸš¨ [parcel]: ' + ansiDiagnostic.message + '\n' + stack + '\n\n' + ansiDiagnostic.hints.join('\n'));
      }
      // Render the fancy html overlay
      removeErrorOverlay();
      var overlay = createErrorOverlay(data.diagnostics.html);
      // $FlowFixMe
      document.body.appendChild(overlay);
    }
  };
  ws.onerror = function (e) {
    console.error(e.message);
  };
  ws.onclose = function (e) {
    if (undefined !== 'test') {
      console.warn('[parcel] ðŸš¨ Connection to the HMR server was lost');
    }
  };
}
function removeErrorOverlay() {
  var overlay = document.getElementById(OVERLAY_ID);
  if (overlay) {
    overlay.remove();
    console.log('[parcel] âœ¨ Error resolved');
  }
}
function createErrorOverlay(diagnostics) {
  var overlay = document.createElement('div');
  overlay.id = OVERLAY_ID;
  let errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';
  for (let diagnostic of diagnostics) {
    let stack = diagnostic.codeframe ? diagnostic.codeframe : diagnostic.stack;
    errorHTML += `
      <div>
        <div style="font-size: 18px; font-weight: bold; margin-top: 20px;">
          ðŸš¨ ${diagnostic.message}
        </div>
        <pre>
          ${stack}
        </pre>
        <div>
          ${diagnostic.hints.map(hint => '<div>' + hint + '</div>').join('')}
        </div>
      </div>
    `;
  }
  errorHTML += '</div>';
  overlay.innerHTML = errorHTML;
  return overlay;
}
function getParents(bundle, id) /*: Array<[ParcelRequire, string]>*/
{
  var modules = bundle.modules;
  if (!modules) {
    return [];
  }
  var parents = [];
  var k, d, dep;
  for (k in modules) {
    for (d in modules[k][1]) {
      dep = modules[k][1][d];
      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {
        parents.push([bundle, k]);
      }
    }
  }
  if (bundle.parent) {
    parents = parents.concat(getParents(bundle.parent, id));
  }
  return parents;
}
function updateLink(link) {
  var newLink = link.cloneNode();
  newLink.onload = function () {
    if (link.parentNode !== null) {
      // $FlowFixMe
      link.parentNode.removeChild(link);
    }
  };
  newLink.setAttribute('href', // $FlowFixMe
  link.getAttribute('href').split('?')[0] + '?' + Date.now());
  // $FlowFixMe
  link.parentNode.insertBefore(newLink, link.nextSibling);
}
var cssTimeout = null;
function reloadCSS() {
  if (cssTimeout) {
    return;
  }
  cssTimeout = setTimeout(function () {
    var links = document.querySelectorAll('link[rel="stylesheet"]');
    for (var i = 0; i < links.length; i++) {
      // $FlowFixMe[incompatible-type]
      var href = /*: string*/
      links[i].getAttribute('href');
      var hostname = getHostname();
      var servedFromHMRServer = hostname === 'localhost' ? new RegExp('^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort()).test(href) : href.indexOf(hostname + ':' + getPort());
      var absolute = (/^https?:\/\//i).test(href) && href.indexOf(window.location.origin) !== 0 && !servedFromHMRServer;
      if (!absolute) {
        updateLink(links[i]);
      }
    }
    cssTimeout = null;
  }, 50);
}
function hmrApply(bundle, /*: ParcelRequire*/
asset) /*:  HMRAsset*/
{
  var modules = bundle.modules;
  if (!modules) {
    return;
  }
  if (asset.type === 'css') {
    reloadCSS();
    return;
  }
  let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];
  if (deps) {
    var fn = new Function('require', 'module', 'exports', asset.output);
    modules[asset.id] = [fn, deps];
  } else if (bundle.parent) {
    hmrApply(bundle.parent, asset);
  }
}
function hmrAcceptCheck(bundle, /*: ParcelRequire*/
id, /*: ParcelRequire*/
/*: string*/
depsByBundle) /*: ?{ [string]: { [string]: string } }*/
{
  var modules = bundle.modules;
  if (!modules) {
    return;
  }
  if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {
    // If we reached the root bundle without finding where the asset should go,
    // there's nothing to do. Mark as "accepted" so we don't reload the page.
    if (!bundle.parent) {
      return true;
    }
    return hmrAcceptCheck(bundle.parent, id, depsByBundle);
  }
  if (checkedAssets[id]) {
    return;
  }
  checkedAssets[id] = true;
  var cached = bundle.cache[id];
  assetsToAccept.push([bundle, id]);
  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    return true;
  }
  return getParents(module.bundle.root, id).some(function (v) {
    return hmrAcceptCheck(v[0], v[1], null);
  });
}
function hmrAcceptRun(bundle, /*: ParcelRequire*/
id) /*: string*/
{
  var cached = bundle.cache[id];
  bundle.hotData = {};
  if (cached && cached.hot) {
    cached.hot.data = bundle.hotData;
  }
  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {
    cached.hot._disposeCallbacks.forEach(function (cb) {
      cb(bundle.hotData);
    });
  }
  delete bundle.cache[id];
  bundle(id);
  cached = bundle.cache[id];
  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    cached.hot._acceptCallbacks.forEach(function (cb) {
      var assetsToAlsoAccept = cb(function () {
        return getParents(module.bundle.root, id);
      });
      if (assetsToAlsoAccept && assetsToAccept.length) {
        assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);
      }
    });
  }
  acceptedAssets[id] = true;
}

},{}],"7dTcv":[function(require,module,exports) {
document.documentElement.className="js";var supportsCssVars=function(){var e,t=document.createElement("style");return t.innerHTML="root: { --tmp-var: bold; }",document.head.appendChild(t),e=!!(window.CSS&&window.CSS.supports&&window.CSS.supports("font-weight","var(--tmp-var)")),t.parentNode.removeChild(t),e};supportsCssVars()||alert("Please view this demo in a modern browser that supports CSS Variables.");
},{}]},["7Bp6r","7dTcv"], "7dTcv", "parcelRequire427e")

</script>
    </head>
    <body class="demo-4">
        <main>
            <div class="frame">
                <h1 class="frame__title">WebGL Video Transitions with <a href="https://www.curtainsjs.com/">curtains.js</a></h1>
                <nav class="frame__links">
                    <a href="https://tympanus.net/Tutorials/Mirrors/">Previous demo</a>
                    <a href="https://tympanus.net/codrops/?p=51333">Article</a>
                    <a href="https://github.com/akella/videoTransitions">GitHub</a>
                </nav>
                <nav class="frame__demos">
                    <span class="frame__demos-text">More demos: </span>
                    <a href="/index.html" class="frame__demo">1</a>
                    <a href="/index2.html" class="frame__demo">2</a>
                    <a href="/index3.html" class="frame__demo">3</a>
                    <a href="/index4.html" class="frame__demo frame__demo--current">4</a>
                    <a href="/index5.html" class="frame__demo">5</a>
                </nav>
                <button class="frame__button" id="intro"><svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 60 60" width="60" height="60"><path d="M45.563 29.174l-22-15A1 1 0 0022 15v30a.999.999 0 001.563.826l22-15a1 1 0 000-1.652zM24 43.107V16.893L43.225 30 24 43.107z"></path><path d="M30 0C13.458 0 0 13.458 0 30s13.458 30 30 30 30-13.458 30-30S46.542 0 30 0zm0 58C14.561 58 2 45.439 2 30S14.561 2 30 2s28 12.561 28 28-12.561 28-28 28z"></path></svg></button>
                <div class="frame__content">
                    <h2 class="frame__content-title">Unpretentious</h2>
                    <p class="frame__content-text">Select another video here:</p>
                    <nav class="frame__switch" id="nav">
                        <a class="frame__switch-item js-nav" data-nav="0">Wake up</a>
                        <a class="frame__switch-item js-nav" data-nav="1">Rejoice</a>
                        <a class="frame__switch-item js-nav" data-nav="2">Breathe</a>
                    </nav>
                </div>
            </div>
            <div class="video">
                <div id="canvas"></div>
                <div class="wrapper">
                    <div class="plane" data-duration="1">
                        <video playsinline="" muted="" src="/7.HASH_REF_f091e464557e15d53d5b94488a95cd3b.mp4" data-sampler="firstTexture" preload="auto"></video>
                        <video playsinline="" muted="" src="/5.HASH_REF_55aa1073893efc1c9c6f7b8648734f65.mp4" data-sampler="secondTexture"></video>
                        <video playsinline="" muted="" src="/6.HASH_REF_7283afb5ffd3e792c0f429e0affa03e2.mp4" data-sampler="thirdTexture"></video>
                    </div>
                </div>
            </div>
        </main>
        <script id="vert" type="text">precision mediump float;

            // default mandatory variables
            attribute vec3 aVertexPosition;
            attribute vec2 aTextureCoord;

            uniform mat4 uMVMatrix;
            uniform mat4 uPMatrix;

            // our texture matrices
            // displacement texture does not need to use them
            uniform mat4 firstTextureMatrix;
            uniform mat4 secondTextureMatrix;

            // custom variables
            varying vec3 vVertexPosition;
            varying vec2 vTextureCoord;
            varying vec2 vFirstTextureCoord;
            varying vec2 vSecondTextureCoord;

            // custom uniforms
            uniform float uTransitionTimer;

            void main() {
                gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);

                // varyings
                // use original texture coords for our displacement
                vTextureCoord = aTextureCoord;
                // use texture matrices for our videos
                vFirstTextureCoord = (firstTextureMatrix * vec4(aTextureCoord, 0.0, 1.0)).xy;
                vSecondTextureCoord = (secondTextureMatrix * vec4(aTextureCoord, 0.0, 1.0)).xy;
                vVertexPosition = aVertexPosition;
            }
        </script>
        <script id="frag" type="text">precision mediump float;

            // Linear interpolate center across center half of the image
            // Transition from https://gl-transitions.com/editor/CrossZoom
            // License: MIT
            // Author: rectalogic
            // ported by gre from https://gist.github.com/rectalogic/b86b90161503a0023231

            // Converted from https://github.com/rectalogic/rendermix-basic-effects/blob/master/assets/com/rendermix/CrossZoom/CrossZoom.frag
            // Which is based on https://github.com/evanw/glfx.js/blob/master/src/filters/blur/zoomblur.js
            // With additional easing functions from https://github.com/rectalogic/rendermix-basic-effects/blob/master/assets/com/rendermix/Easing/Easing.glsllib

            precision mediump float;

            varying vec3 vVertexPosition;
            varying vec2 vTextureCoord;
            varying vec2 vFirstTextureCoord;
            varying vec2 vSecondTextureCoord;

            // custom uniforms
            uniform float uTransitionTimer;
            uniform float uTimer;
            uniform float uTo;
            uniform float uFrom;
            uniform float uFadeIn;

            // our textures samplers
            // notice how it matches our data-sampler attributes
            uniform sampler2D firstTexture;
            uniform sampler2D secondTexture;
            uniform sampler2D thirdTexture;
            uniform sampler2D displacement;

            float strength = 0.4; // = 0.4

            const float PI = 3.141592653589793;

            float Linear_ease(in float begin, in float change, in float duration, in float time) {
                return change * time / duration + begin;
            }

            float Exponential_easeInOut(in float begin, in float change, in float duration, in float time) {
                if (time == 0.0)
                    return begin;
                else if (time == duration)
                    return begin + change;
                time = time / (duration / 2.0);
                if (time < 1.0)
                    return change / 2.0 * pow(2.0, 10.0 * (time - 1.0)) + begin;
                return change / 2.0 * (-pow(2.0, -10.0 * (time - 1.0)) + 2.0) + begin;
            }

            float Sinusoidal_easeInOut(in float begin, in float change, in float duration, in float time) {
                return -change / 2.0 * (cos(PI * time / duration) - 1.0) + begin;
            }

            float rand (vec2 co) {
              return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
            }



            vec4 getTextureByIndex(float index, vec2 vUv){
                vec4 result;
                if(index==0.){
                    result = texture2D(firstTexture,vUv);
                }
                if(index==1.){
                    result = texture2D(secondTexture,vUv);
                }
                if(index==2.){
                    result = texture2D(thirdTexture,vUv);
                }
                return result;
            }
            vec3 crossFade(in vec2 uv, in float dissolve, in float t1,in  float t2) {
                return mix(getTextureByIndex(t1,uv).rgb, getTextureByIndex(t2,uv).rgb, dissolve);
            }
            void main() {

                float progress = fract(uTransitionTimer);
                float currentTexture = uFrom;
                float nextTexture =  uTo;

                vec4 current = getTextureByIndex(uFrom, vFirstTextureCoord);
                vec4 next = getTextureByIndex(uTo, vFirstTextureCoord);
                float mask = step(vTextureCoord.y,uFadeIn);


                vec2 center = vec2(Linear_ease(0.25, 0.5, 1.0, progress), 0.5);
                float dissolve = Exponential_easeInOut(0.0, 1.0, 1.0, progress);

                // Mirrored sinusoidal loop. 0->strength then strength->0
                float strength = Sinusoidal_easeInOut(0.0, strength, 0.5, progress);

                vec3 color = vec3(0.0);
                float total = 0.0;
                vec2 toCenter = center - vFirstTextureCoord;

                /* randomize the lookup values to hide the fixed number of samples */
                float offset = rand(vFirstTextureCoord);

                for (float t = 0.0; t <= 40.0; t++) {
                    float percent = (t + offset) / 40.0;
                    float weight = 4.0 * (percent - percent * percent);
                    color += crossFade(vFirstTextureCoord + toCenter * percent * strength, dissolve, currentTexture,nextTexture) * weight;
                    total += weight;
                }

                gl_FragColor = vec4(color / total, 1.0);
                gl_FragColor = mix(vec4(0.,0.,0.,0),gl_FragColor, mask);
            }
        </script>
		<script src="/index5.HASH_REF_b9167a940929bdec77a4418224e1d95d.js"></script>
	</body>
</html>